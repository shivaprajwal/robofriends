{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfeild","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErroBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACjB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCExBW,EAbG,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACI,6BACC,2BACAX,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCJI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKJ,MAAO,CAACC,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKX,MAAMK,a,GAhBGO,aC6CZC,G,wDAtCX,aAAc,IAAD,8BACZ,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAU,CAACtB,YAAaqB,EAAME,OAAOC,SAb1C,EAAKX,MAAQ,CACTnB,OAAO,GACPM,YAAY,IAJJ,E,gEAQK,IAAD,OACjByB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKP,SAAS,CAAC5B,OAAQmC,S,+BAOjC,IAAD,EACyBZ,KAAKJ,MAA5BnB,EADF,EACEA,OAAQM,EADV,EACUA,YACV8B,EAAiBpC,EAAOqC,QAAO,SAAArC,GACjC,OAAOA,EAAOP,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAE1D,OAAQtC,EAAOwC,OAGP,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKG,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAAQoC,OAPhC,2C,GA1BaZ,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.024edf80.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n  return(\r\n      <div>\r\n          {\r\n              robots.map((user, i) =>{\r\n                  return(\r\n                      <Card \r\n                      key={i}\r\n                      id={robots[i].id}\r\n                      name={robots[i].name}\r\n                      email={robots[i].email}\r\n                      />\r\n                  );\r\n              })\r\n          }\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfeild, SearchChange})=>{\r\n    return(\r\n        <div>\r\n         <input\r\n         className='pa3 ba b--green bg-lighttest-blue' \r\n         type='search' \r\n         placeholder='search robots'\r\n         onChange={SearchChange}\r\n         />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style= {{overflowY: 'scroll', border:'5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErroBoundary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false \r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state ({hasError: true})\r\n    }\r\n\r\n    render() {\r\n      if(this.state.hasError) {\r\n          return <h1>Opps! That is not good </h1>\r\n      }\r\n      return this.props.children    \r\n    }\r\n}\r\n\r\nexport default ErroBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErroBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n     super()\r\n     this.state = {\r\n         robots:[],\r\n         searchfeild:''\r\n        }\r\n    }\r\n\r\n componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response => response.json())\r\n     .then(users => {this.setState({robots: users})});\r\n }\r\n\r\n onSearchChange = (event) => {\r\n     this.setState ({searchfeild: event.target.value})\r\n    }   \r\n\r\n render() {\r\n     const {robots, searchfeild} = this.state\r\n    const filteredRobots = robots.filter(robots => {\r\n        return robots.name.toLowerCase().includes(searchfeild.toLowerCase());\r\n    })\r\n    return !robots.length?\r\n     <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <SearchBox SearchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                 <ErroBoundary>\r\n                   <CardList robots={filteredRobots}/>\r\n                 </ErroBoundary>       \r\n                </Scroll>\r\n            </div>       \r\n        )\r\n        }    \r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}